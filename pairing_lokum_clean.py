from sage.all_cmdline import *   # import sage library

from sage.rings.integer_ring import ZZ
from sage.rings.rational_field import QQ
from sage.misc.functional import cyclotomic_polynomial
from sage.rings.finite_rings.finite_field_constructor import FiniteField, GF
from sage.schemes.elliptic_curves.constructor import EllipticCurve
from sage.schemes.elliptic_curves.ell_point import *

# this is much much faster with this statement:
# proof.arithmetic(False)
from sage.structure.proof.all import arithmetic

from pairing import *
from pairing_cp6_782 import *
from test_pairing import *
    
def check_curve_order(E, order):
    # randomized probabilistic check, usefull for large parameters
    ok = True
    i=0
    while ok and i < 10:
        P = E.random_element()
        ok = order*P == E(0)
        i += 1
    return ok

# Originally -> def test_lokum(u, a, b, q, r, tr, c, y, D, xi):
def test_lokum(a, b, q, r, tr, c, D):
    print("###################################################################")
    print("test curve E: y^2 = x^3 + a*x + b")
    print("a = {} b = {:#x}".format(a, b))

    #assert q == (tr**2 + D*y**2)//4
    print("q = {:#x} # {} bits".format(q, q.nbits()))
    Fq = GF(q)
    E = EllipticCurve([Fq(a),Fq(b)])
    P = E.random_point()
    print("P is a random_point on the elliptic curve!")
    print(P)
    print("The order of the curve is:", c)
    order_P_Q = r * c
    print("P * order_P_Q is")
    print(P * order_P_Q)
    res = check_curve_order(E,r*c)
    print("check_curve_order(E,r*c): {}".format(res))
    print("ate pairing, Miller loop scalar is tr-1 =\nT = {}\nT = {:#x}".format(tr-1, tr-1))

    ## THIS IS FOR EXTENDING LOKUM FIELDS 1-4-8
    xi = ZZ(2)
    Fqz = Fq['z']; (z,) = Fqz._first_ngens(1);
    Fq8_abs = Fq.extension(z**8 - xi, names=('j',)); (j,) = Fq8_abs._first_ngens(1)
    Fq4 = Fq.extension(z**4 - xi, names=('j',)); (j,) = Fq4._first_ngens(1);
    Fq4Z = Fq4['Z']; (Z,) = Fq4Z._first_ngens(1);
    Fq8 = Fq4.extension(Z**2 - j, names=('s',)); (s,) = Fq8._first_ngens(1)

    # EXAMPLE
    EK = E.base_extend(Fq8_abs)
    print(EK)
    
    print("A random point in the extension field, Q is: ")
    Q = EK.random_point()
    print(Q)
    print("order of Q is: ")
    print(Q.order())

    print("A random point in the extension field, T is: ")
    T = EK.random_point()
    print(T)
    
    Z = Q + T
    print("Z is an addition of Q to the T")
    print(Z)


    # using the weil_pairing below
    # https://github.com/sagemath/sagesmc/blob/master/src/sage/schemes/elliptic_curves/ell_point.py#L1498
    x = Q.weil_pairing(T, 11178471414836345336059048855611390994257347541678490001885302105452889531220681887063760522435920242549498857070544319215681595199825520457978318663949088451956393179940626847131008230965896616721895736790011463601842300814881217357911666596763666142060364248293661581607975062108643224429446283393991255035656825117099140533934652875143386959036703603226566679927774482780478792984642946385754975582563741941170313319050311130987979716708470069385452052743295817756387189493033394289373456999033551211492693962602437835427803879042700605665271512616644853266461370443414567029631937208881495158644492620428589143183636655393718868986856362999803778403269108096669598360627088720895292022466546145805613907119407341002305902542929009712010952117502667466294030730061615881003093058836542115915779296546454823737486659498696382465941269092111594805775965304567737873324377973343180166011760630835377760362141121685804988129983376016160652759299142703468026467306556279618698252911728583946615756708459752059357920596901915230169254310895866402942405009235706175972318443692528574476593489954174142202606563337911501692785987709315325523637478127171293449780083027709715228710614005458956061504218741911709094828298418333340827389154912375715843217153929829606277277554688)
    y = T.weil_pairing(Q, 11178471414836345336059048855611390994257347541678490001885302105452889531220681887063760522435920242549498857070544319215681595199825520457978318663949088451956393179940626847131008230965896616721895736790011463601842300814881217357911666596763666142060364248293661581607975062108643224429446283393991255035656825117099140533934652875143386959036703603226566679927774482780478792984642946385754975582563741941170313319050311130987979716708470069385452052743295817756387189493033394289373456999033551211492693962602437835427803879042700605665271512616644853266461370443414567029631937208881495158644492620428589143183636655393718868986856362999803778403269108096669598360627088720895292022466546145805613907119407341002305902542929009712010952117502667466294030730061615881003093058836542115915779296546454823737486659498696382465941269092111594805775965304567737873324377973343180166011760630835377760362141121685804988129983376016160652759299142703468026467306556279618698252911728583946615756708459752059357920596901915230169254310895866402942405009235706175972318443692528574476593489954174142202606563337911501692785987709315325523637478127171293449780083027709715228710614005458956061504218741911709094828298418333340827389154912375715843217153929829606277277554688)
    z = Z.weil_pairing(Q, 11178471414836345336059048855611390994257347541678490001885302105452889531220681887063760522435920242549498857070544319215681595199825520457978318663949088451956393179940626847131008230965896616721895736790011463601842300814881217357911666596763666142060364248293661581607975062108643224429446283393991255035656825117099140533934652875143386959036703603226566679927774482780478792984642946385754975582563741941170313319050311130987979716708470069385452052743295817756387189493033394289373456999033551211492693962602437835427803879042700605665271512616644853266461370443414567029631937208881495158644492620428589143183636655393718868986856362999803778403269108096669598360627088720895292022466546145805613907119407341002305902542929009712010952117502667466294030730061615881003093058836542115915779296546454823737486659498696382465941269092111594805775965304567737873324377973343180166011760630835377760362141121685804988129983376016160652759299142703468026467306556279618698252911728583946615756708459752059357920596901915230169254310895866402942405009235706175972318443692528574476593489954174142202606563337911501692785987709315325523637478127171293449780083027709715228710614005458956061504218741911709094828298418333340827389154912375715843217153929829606277277554688)
    print("### The result of the weil pairing is ###")
    print(x)
    print(y)
    print(z)
    
    n = 11178471414836345336059048855611390994257347541678490001885302105452889531220681887063760522435920242549498857070544319215681595199825520457978318663949088451956393179940626847131008230965896616721895736790011463601842300814881217357911666596763666142060364248293661581607975062108643224429446283393991255035656825117099140533934652875143386959036703603226566679927774482780478792984642946385754975582563741941170313319050311130987979716708470069385452052743295817756387189493033394289373456999033551211492693962602437835427803879042700605665271512616644853266461370443414567029631937208881495158644492620428589143183636655393718868986856362999803778403269108096669598360627088720895292022466546145805613907119407341002305902542929009712010952117502667466294030730061615881003093058836542115915779296546454823737486659498696382465941269092111594805775965304567737873324377973343180166011760630835377760362141121685804988129983376016160652759299142703468026467306556279618698252911728583946615756708459752059357920596901915230169254310895866402942405009235706175972318443692528574476593489954174142202606563337911501692785987709315325523637478127171293449780083027709715228710614005458956061504218741911709094828298418333340827389154912375715843217153929829606277277554688
    
    U = int(order_P_Q/n**2)*EK.random_point()
    V = int(order_P_Q/n**2)*EK.random_point()
    print("THE ORDER OF U AND V ARE")

    weil_u_v = U.weil_pairing(V, n)
    print(weil_u_v)

if __name__ == "__main__":
    print("Hello world!")

    arithmetic(False)
    #preparse("QQx.<x> = QQ[]")
    QQx = QQ['x']; (x,) = QQx._first_ngens(1)
    # BLS12-377 seed
    # CHANGE: u0
    u0 = ZZ(0x8508C00000000001)
    # Lokum parameters
    r = ZZ(3618502788666131213697322783095070105623107215331596699973092056135872020481)
    q = ZZ(570227033427643938477351787526785557771164366858588273239167105706995178753794255646220989581954976296644199541099698255998850583874501725806067165976078609861)
    a = ZZ(408825162639581376425354251544709546275292709793540929634396921208238440519285149826351823244598728486772571705638177322608711025414928328755239670937630810045)
    b = ZZ(349808739615329235353531183724887241300117306968432494640082668760849877387756346906668495855253497480229722131408639028906859040081069711950364714123876057189)
    # cofactor of the curve
    c = ZZ(157586456811283429841422804972005719747057336671136400349968118675472488492656786156)
    tr= ZZ(3816706629471577761299121574721828830967739654627469433190085390763284409348826)
    D = ZZ(-143)

    Miller_loop_scalar = ZZ(3816706629471577761299121574721828830967739654627469433190085390763284409348825)
    assert Miller_loop_scalar == (tr-1)

    test_lokum(a, b, q, r, tr, c, D)